{"version":3,"sources":["componets/Navbar.tsx","componets/TodoForm.tsx","componets/TodoList.tsx","Pages/TodosPage.tsx","Pages/AboutPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","href","to","TodoForm","props","ref","useRef","type","id","placeholder","onKeyPress","event","key","onAdd","current","value","htmlFor","TodoList","todos","onRemove","onToggle","length","map","todo","classes","completed","push","console","log","join","checked","onChange","bind","title","onClick","preventDefault","removeHandler","TodosPage","useState","setTodos","useEffect","saved","JSON","parse","localStorage","getItem","setItem","stringify","newTodo","Date","now","prev","confirm","filter","AboutPage","history","useHistory","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5579921.chunk.js","sourcesContent":["import React from 'react';\nimport {NavLink} from 'react-router-dom'\nexport const Navbar: React.FC = () => {\n    return (\n        <nav>\n            <div className=\"nav-wrapper blue darken-1 px1\">\n                <a href=\"/\" className=\"brand-logo\">Dmitry</a>\n                <ul className=\"right hide-on-med-and-down\">\n                    <li><NavLink to=\"/\">Список дел</NavLink></li>\n                    <li><NavLink to=\"/about\">Информация</NavLink></li>\n                </ul>\n            </div>\n        </nav>\n    )\n};","import React,{ useRef } from 'react';\n\n\ninterface TodoFromProps {\n    onAdd(title: string): void\n}\n\nexport const TodoForm: React.FC<TodoFromProps> = (props) => {\n    const ref = useRef<HTMLInputElement>(null);\n    const keyPressHandler = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        if(event.key === 'Enter'){\n            props.onAdd(ref.current!.value);\n            ref.current!.value = '';\n        }\n    }\n    return (\n        <div className='input-field mt2'>\n            <input type=\"text\"\n                   id='title'\n                   placeholder='Введите задачу'\n                   ref={ref}\n                   onKeyPress={keyPressHandler}\n            />\n            <label htmlFor=\"title\" className='active'>Введите задачу</label>\n        </div>\n    )\n}","import React from 'react';\nimport {ITodo} from \"./interfaces\";\n\ntype TodoListProps = {\n    todos: ITodo[]\n    onToggle(id: number) : void\n    onRemove : (id: number) => void\n}\n\nexport const TodoList: React.FC<TodoListProps> = ({\n                                                      todos,\n                                                      onRemove,\n                                                      onToggle}) => {\n    if(todos.length === 0) {\n        return <p className='center'>Пока дел нет!</p>\n    }\n\n    const removeHandler = (event: React.MouseEvent, id: number) => {\n      event.preventDefault();\n      onRemove(id);\n    }\n    return (\n        <ul>\n            {todos.map( todo => {\n                const classes = ['todo'];\n                if(todo.completed) {\n                    classes.push('completed');\n                }\n                console.log(todo.completed);\n                return (\n                        <li key={todo.id} className={classes.join(' ')}>\n                            <label>\n                                <input type=\"checkbox\"\n                                       checked={todo.completed}\n                                       onChange={onToggle.bind(null, todo.id)}\n                                />\n                                <span>{todo.title}</span>\n                                <i\n                                    className='material-icons red-text'\n                                    onClick={ (event) => removeHandler(event, todo.id)}\n                                >delete</i>\n                            </label>\n                        </li>\n                    )\n                }\n            )\n            }\n\n        </ul>\n    )\n}","import React, { useState , useEffect } from 'react';\nimport {TodoForm} from \"../componets/TodoForm\";\nimport {ITodo} from \"../componets/interfaces\";\nimport {TodoList} from \"../componets/TodoList\";\n\n\ndeclare var confirm: (question: string) => boolean\n\nexport const TodosPage: React.FC = () => {\n\n    const [todos, setTodos] = useState<ITodo[]>([]);\n    useEffect(() =>{\n        const saved = JSON.parse(localStorage.getItem('todos') || '[]') as ITodo[];\n        setTodos(saved)\n    }, []);\n\n    useEffect(() =>{\n        localStorage.setItem('todos', JSON.stringify(todos));\n    }, [todos]);\n\n    const addHandler = ( title: string) => {\n        const newTodo: ITodo = {\n            title: title,\n            id: Date.now(),\n            completed: false,\n        }\n        setTodos((prev) => [newTodo, ...prev]);\n    }\n\n    const toggleHandler = (id: number) => {\n        setTodos(prev =>\n            prev.map(todo => {\n                if (todo.id === id) {\n                    return {\n                        ...todo,\n                        completed: !todo.completed,\n                    }\n                }\n                return todo;\n            })\n        )\n    }\n    const removeHandler = (id: number) => {\n        const shouldRemove = confirm('Вы уверены что хотите удалить элемент?');\n        if(shouldRemove) {\n            setTodos(prev => prev.filter(todo => todo.id !== id))\n        }\n    }\n    return (\n        <>\n            <TodoForm\n                onAdd={addHandler}\n            />\n            <TodoList\n                todos={todos}\n                onRemove={removeHandler}\n                onToggle={toggleHandler}\n            />\n        </>\n    )\n}","import React from 'react';\nimport {useHistory} from \"react-router-dom\";\n\nexport const AboutPage: React.FC = () => {\n    const history = useHistory();\n    return (\n        <>\n        <h1>Страница информации</h1>\n            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit.\n                Ad, debitis dolorem impedit in iste natus repellendus. Ab adipisci\n                aperiam assumenda aut cupiditate doloremque dolores eius eos exercitationem\n                explicabo facilis fuga illo incidunt ipsa ipsum iste itaque iure libero minima,\n                neque officiis pariatur ratione sapiente, tempore tenetur unde voluptas voluptatibus?\n                Aliquam asperiores cum debitis maiores perferendis quam quibusdam. Cum quis quos ut.\n            </p>\n            <button className='btn' onClick={() => history.push('/')}>Обратно к списку дел</button>\n        </>\n    )\n}","import React from 'react';\nimport {Navbar} from \"./componets/Navbar\";\nimport {\n    BrowserRouter,\n    Switch,\n    Route,\n} from 'react-router-dom';\nimport {TodosPage} from \"./Pages/TodosPage\";\nimport {AboutPage} from \"./Pages/AboutPage\";\n\nconst App: React.FC = () =>  {\n\n  return (\n      <BrowserRouter>\n        <>\n          <Navbar/>\n            <div className='container'>\n                <Switch>\n                    <Route exact path='/' component={TodosPage}/>\n                    <Route  path='/about' component={AboutPage}/>\n                </Switch>\n            </div>\n        </>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}